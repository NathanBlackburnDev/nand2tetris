// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/5/CPU.hdl
/**
 * The Hack Central Processing unit (CPU).
 * Parses the binary code in the instruction input and executes it according to the
 * Hack machine language specification. In the case of a C-instruction, computes the
 * function specified by the instruction. If the instruction specifies to read a memory
 * value, the inM input is expected to contain this value. If the instruction specifies
 * to write a value to the memory, sets the outM output to this value, sets the addressM
 * output to the target address, and asserts the writeM output (when writeM = 0, any
 * value may appear in outM).
 * If the reset input is 0, computes the address of the next instruction and sets the
 * pc output to that value. If the reset input is 1, sets pc to 0.
 * Note: The outM and writeM outputs are combinational: they are affected by the
 * instruction's execution during the current cycle. The addressM and pc outputs are
 * clocked: although they are affected by the instruction's execution, they commit to
 * their new values only in the next cycle.
 */
CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M? 
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    PARTS:
    // TODO: Workout current instruction
    Mux16(a=instruction, b=aluOut, sel=instruction[15], out=muxOut1);
    Register(in=muxOut1, load=instruction[5], out=aRegOut, out=addressM);

    // TODO: Operation of the ALU
    Mux16(a=aRegOut, b=inM, sel=instruction[12], out=muxOut2);
    Register(in=aluOut, load=instruction[4], out=dRegOut);
    ALU(x=dRegOut, y=muxOut2, zx=zx, nx=nx, zy=zy, ny=ny, f=f, no=no, out=outM, out=aluOut, zr=zr, ng=ng);
    Mux16(a=false, b=true, sel=instruction[3], out=writeM);

    // TODO: Control logic

    // TODO: Control logic for no jump [000]

    // TODO: JGT [001]
    Or(a=zr, b=ng, out=orOut);
    Mux16(a=true, b=false, sel=orOut, out=jgt);

    // TODO: JEQ [010]
    Mux16(a=false, b=true, sel=zr, out=jeq);

    // TODO: JGE [011]
    

    // TODO: JLT [100]
    Mux16(a=false, b=true, sel=ng, out=jlt);

    // TODO: JNE [101]
    Mux16(a=true, b=false, sel=zr, out=);

    // TODO: JLE [110]

    // TODO: JMP [111]
}