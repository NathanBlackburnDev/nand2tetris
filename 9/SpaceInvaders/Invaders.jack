class Invaders {
    field int rowsCount, y, speed, arrCounter, timeSinceLastBullet;
    field Array aliens, bullets;
    field boolean direction;
    field Random random;

    constructor InvadersConstruct new(int rows, int randomSeed) {
        let this.rowsCount = rows;
        let this.direction = false;
        let this.y = 40;
        let this.aliens = this.initializeAliens();
        let this.speed = 1;
        let this.arrCounter = this.rowsCount * ((512 - 80) / 30);                       // Initialize arrCounter to the total number of aliens
        let this.bullets = Array.new(50);                                               // Pre-allocate space for bullets
        let this.timeSinceLastBullet = 0;
        let this.random = Random.new(randomSeed);
        return this;
    }


    method void update() {
        var int updateCounter;
        var boolean hasChanged;
        let updateCounter = 0;

        // Move aliens horizontally
        while (updateCounter < this.arrCounter) {
            if (this.direction = true) { let this.aliens[updateCounter].x = this.aliens[updateCounter].x + this.speed; }              // Move right along X-axis
            else { let this.aliens[updateCounter].x = this.aliens[updateCounter].x - this.speed; }                                    // Move left along X-axis
            let updateCounter = updateCounter + 1;
        }

        // Check if direction has changed, move aliens down
        let hasChanged = this.hasChangedDirection();
        if (hasChanged = true) { do this.moveAlienDown(); }

        // If no more aliens, advance to next level
        if (this.arrCounter = 0) { do this.nextLevel(); }

        // Handle alien shooting bullets
        if ((this.timeSinceLastBullet > 40) | (this.timeSinceLastBullet = 40)) {
            var Alien bottomAliens;
            let bottomAliens = this.getBottomAliens();
            if (~(bottomAliens = null)) { do this.makeABottomAlienShoot(bottomAliens); }
        }
        let this.timeSinceLastBullet = timeSinceLastBullet + 1;

        do this.updateBullets();
    }


    method boolean hasChangedDirection() {
        var int updateCounter;
        let updateCounter = 0;
        
        while (updateCounter < this.arrCounter) {
            if ((this.aliens[updateCounter].x = 512 - 40) | (this.aliens[updateCounter].x > 512 - 40)) {
                let this.direction = false;                 // Change direction to left
                return true;
            }
            let updateCounter = updateCounter + 1;
        }
        return false;
    }


    method void moveAlienDown() {
        var int updateCounter;
        let updateCounter = 0;
        
        while (updateCounter < this.arrCounter) {
            let this.aliens[updateCounter].y = this.aliens[updateCounter].y + 10;               // Move down by 10 units
            let updateCounter = updateCounter + 1;
        }
    }


    method Array getBottomAliens() {
        var Array allXPositions;
        var Array aliensAtTheBottom;
        var int xPosIndex;
        var int bestYPosition;
        var Alien lowestAlien;
        var int alienIndex;
    
        // Get all unique X positions of aliens
        let allXPositions = this.getAllXPositions();
        let aliensAtTheBottom = Array.new(this.rowsCount);
        let xPosIndex = 0;
    
        // For each X position, find lowest alien
        while (xPosIndex < this.rowsCount) {
            let bestYPosition = 0;
            let lowestAlien = null;
            let alienIndex = 0;
    
            while (alienIndex < this.arrCounter) {
                if (this.aliens[alienIndex].x = allXPositions[xPosIndex]) {
                    if (this.aliens[alienIndex].y > bestYPosition) {
                        let bestYPosition = this.aliens[alienIndex].y;
                        let lowestAlien = this.aliens[alienIndex];
                    }
                }
                let alienIndex = alienIndex + 1;
            }
    
            if (~(lowestAlien = null)) {
                let aliensAtTheBottom[xPosIndex] = lowestAlien;
            }
            let xPosIndex = xPosIndex + 1;
        }
    
        return aliensAtTheBottom;
    }
    

    method Array getAllXPositions() {
        var Array allXPositions;
        var int alienIndex;

        let allXPositions = Array.new(this.arrCounter);
        let alienIndex = 0;

        while (alienIndex < this.arrCounter) {
            let allXPositions[alienIndex] = this.aliens[alienIndex].x;
            let alienIndex = alienIndex + 1;
        }

        return allXPositions;
    }


    method Array initialiseAliens() {
        var Array updateAliens;
        var int updateY;
        var int updateX;
        var int counterI;
        var int index;

        let updateY = 40;
        let counterI = 0;
        let index = 0;
        let updateAliens = Array.new(this.rowsCount * ((512 - 80) / 30));             // Calculate num of aliens, - 80 to account for margins, / 30 for 30 aliens per row

        // Add new correctly positioned alien object
        while (counterI < this.rowsCount) {
            let updateX = 40;
            while (updateX < 512 - 40) {
                let updateAliens[index] = Alien.new(updateX, updateY);
                let updateX = updateX + 30;                                           // Increment by 30 to place next alien 30 pixels to the right of previous one                                    
                let index = index + 1;
            }
            let updateY = updateY + 40;                                               // Increment by 40 to place next row of aliens 40 pixels below previous row
            let counterI = counterI + 1;
        }
        return updateAliens;
    }


    method void draw() {
        var int updateCounter;
        let updateCounter = 0;
        
        // Draw bullets to appear underneath aliens first
        while (updateCounter < this.timeSinceLastBullet) {
            if (~(this.bullets[updateCounter] = null)) {
                do this.bullets[updateCounter].draw();
            }
            let updateCounter = updateCounter + 1;
        }

        // Draw the aliens
        let updateCounter = 0;
        while (updateCounter < this.arrCounter) {
            do this.aliens[updateCounter].draw();
            let updateCounter = updateCounter + 1;
        }
    }


    method boolean checkCollision(int x, int y) {
        var int decrementCounter;
        var Alien currentAlien;
        var int alienX, alienY;
        var int distanceSquared;
        var int dx, dy;
        let decrementCounter = this.arrCounter - 1;

        // Check collision with aliens
        while ((decrementCounter > 0) | (decrementCounter = 0)) {
            let currentAlien = this.aliens[decrementCounter];
            let alienX = currentAlien.x + 11;                                   // Offset for center of alien obj
            let alienY = currentAlien.y + 8;                                    // Offset for center of alien obj
            let dx = alienX - x;
            let dy = alienY - y;
            let distanceSquared = dx * dx + dy * dy;                            // sqrt(((x2 - x1) ** 2 ) + ((y2 - y1) ** 2))

            // if distanceSquare < 10 ** 2, collision detected
            if (distanceSquared < 100) {
                var int i;
                let i = decrementCounter;

                // Remove aliens by shifting elements
                while (i < this.arrCounter - 1) {
                    let this.aliens[i] = this.aliens[i + 1];
                    let i = i + 1;
                }

                // Collision detected
                let this.arrCounter = this.arrCounter - 1;
                return true;
            }
            let decrementCounter = decrementCounter - 1;
        }
        return false;
    }

    method void makeABottomAlienShoot(Array bottomAliens) {
        var int randomIndex;
        var Alien shootingAlien;
        var AlienBullet newBullet;
        var int bottomAliensCount;

        // Calculate the length of bottomAliens
        let bottomAliensCount = 0;
        while (bottomAliensCount < this.rowsCount) {
            if (~(bottomAliens[bottomAliensCount] = null)) {
                let bottomAliensCount = bottomAliensCount + 1;
            } else {
                let bottomAliensCount = this.rowsCount;
            }
        }

        // Generate a random index
        let randomIndex = this.random.nextInt(bottomAliensCount);
        let shootingAlien = bottomAliens[randomIndex];                                          // Get the shooting alien
        let newBullet = AlienBullet.new(shootingAlien.x + 10, shootingAlien.y + 10);  
        let this.bullets[this.timeSinceLastBullet] = newBullet;                                 // Add the new bullet to the bullets array
        let this.timeSinceLastBullet = 0;                                                       // Reset the bullet timer
    }

    method void keyboardPressed() {
        var int key;
        let key = Keyboard.keyPressed();
        if (key = 68) { come back to this after creating player class }                              // D
        if (key = 65) { come back to this after creating player class }                                  // A
    }

    method void dispose() {
        do Memory.deAlloc(this);
        return;
    }
}