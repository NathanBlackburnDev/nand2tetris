class Player {
    field int x, y, lives, score, imageWidth, imageHeight;
    field boolean isMovingLeft, isMovingRight;
    field Array bullets;

    constructor Player new(int shooterImageWidth, int shooterImageHeight) {
        // Initialize player's position, movement flags, and bullet array
        let this.x = 256;                           // Centered horizontally
        let this.y = 230;                           // Near the bottom
        let this.isMovingLeft = false;
        let this.isMovingRight = false;
        let this.bullets = Array.new(50);           // Pre-allocate space for bullets
        let this.lives = 3;                         // Initial number of lives
        let this.score = 0;                         // Initial score
        let this.imageWidth = shooterImageWidth / 20;
        let this.imageHeight = shooterImageHeight / 20;
        return this;
    }


    method void update() {
        // Move player based on movement flags
        if (this.isMovingRight) { let this.x = this.x + 1; }
        if (this.isMovingLeft) { let this.x = this.x - 1; }
        do this.constrain();
        do this.updateBullets();
    }


    method void updateBullets() {
        var int i;
        var int newSize;
        let newSize = 0;

        // Iterate through bullets array and update each bullet
        let i = 0;
        while (i < 50) {
            if (~(this.bullets[i] = null)) {
                do this.bullets[i].udpate();

                // Check for collision or if bullet is off-screen
                if (do this.hasHitAlien(this.bullets[i]) | do this.bullets[i].isOffScreen()) { let this.bullets[i] = null; }
                else {
                    let this.bullets[newSize] = this.bullets[i];
                    let newSize = newSize + 1;
                }
            }
            let i = i + 1;
        }

        while (newSize < 50) {
            let this.bullets[newSize] = null;
            let newSize = newSize + 1;
        }
    }

    method boolean hasHitAlien(Bullet bullet) {
        return invaders.checkCollision(bullet.x, bullet.y);
    }


    method void constrain() {
        if (this.x < 0) {
            let this.x = 0;
        }
        if (this.x > 512 - this.imageWidth) { // Assuming width is 512
            let this.x = 512 - this.imageWidth;
        }
    }


    method void draw() {
        var int location;
        let location = this.y * 32 + this.x / 16;
        do Memory.poke(16384 + location, 8);
        do Memory.poke(16384 + location + 32, 62);
        do Memory.poke(16384 + location + 64, 127);
        do Memory.poke(16384 + location + 96, 127);

        do this.drawBullets();
    }


    method void drawBullets() {
        var int i;
        let i = 0;
        while (i < 50) {
            if (~(this.bullets[i] = null)) {
                do this.bullets[i].draw();
            }
            let i = i + 1;
        }
    }


    method void drawLives() {
        // Set cursor position and print "LIVES"
        do Output.moveCursor(1, 25);
        do Output.printString("LIVES");
        
        var int i;
        let i = 0;

        while (i < this.lives) {
            var int location;
            let location = 10 * 32 + (300 + i * 30) / 16;
            do Memory.poke(16384 + location, 8);                                
            do Memory.poke(16384 + location + 32, 62);
            do Memory.poke(16384 + location + 64, 127);
            do Memory.poke(16384 + location + 96, 127);
            let i = i + 1;
        }
    }

    method void drawScore() {
        // Set cursor position and print "SCORE"
        do Output.moveCursor(1, 5);
        do Output.printString("SCORE");

        // Move cursor to the position where the score will be printed
        do Output.moveCursor(1, 11);
        do Output.printInt(this.score); // Print the score as an integer
    }


    method void moveLeft() {
        let this.isMovingRight = false;
        let this.isMovingLeft = true;
    }

    method void moveRight() {
        let this.isMovingLeft = false;
        let this.isMovingRight = true;
    }

    method void shoot() {
        var Bullet newBullet;
        let newBullet = Bullet.new(this.x + 12, this.y);

        // Find empty slot in bullets array
        var int i;
        let i = 0;
        while (i < 50) {
            if (this.bullets[i] = null) {
                let this.bullets[i] = newBullet;
                return;
            }
            let i = i + 1;
        }
    }
}